import numpy as np
import matplotlib.pyplot as plt
import linecache
from matplotlib.backends.backend_pdf import PdfPages
import sys
import os

from sklearn import datasets
from sklearn.decomposition import PCA
from sklearn.metrics import accuracy_score
# Splitting the dataset into the Training set and Test set
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier

#Limit Parameter
limit_file = 'TestData/TestData/LimitsOfParam/Federtyp_00.typcfg'

with open(limit_file, 'r') as f:
    lines = f.readlines()[22:]
    lines = [line.rstrip('\r\n') for line in lines]
    lines = [line for line in lines if line != ''][1::2]

limit = []
for line in lines:
    l = line.split('=')[1]
    limit.append(float(l))

#Measurement Data
file_name = 'TestData/TestData/MeasuramentsData/Federtyp B_1.TXT'

# Get labels
label = linecache.getline(file_name, 11).split(';')[1:]

def read_file(file_name):
    with open(file_name, 'r') as f:
        lines = f.readlines()[12:]

        data = []
        hours = []
        for line in lines:
            date, other = line.split(' ')
            hour = other[0:8]
            data_temp = other[12:].split(';')
            data_temp = [float(d.replace(',', '.')) for d in data_temp[:-1]] #remove '/r/n' (last index)

            data.append(data_temp)
            hours.append(hour)

    data = np.asarray(data)
    return data

# print data
data = read_file(file_name)

#Referenced from https://www.datacamp.com/community/tutorials/k-nearest-neighbor-classification-scikit-learn
pca = PCA(n_components='mle')
X1 = data[:75,0:40]

#Measurement Data for rest of the pen
file_name = 'TestData/TestData/MeasuramentsData/Federtyp B_2.TXT'
data2 = read_file(file_name)
X2 = data2[:75,0:40]

#Measurement Data for rest of the pen
file_name = 'TestData/TestData/MeasuramentsData/Federtyp B_3.TXT'
data3 = read_file(file_name)
X3 = data3[:75,0:40]

#Measurement Data for rest of the pen
file_name = 'TestData/TestData/MeasuramentsData/Federtyp B_4.TXT'
data4 = read_file(file_name)
X4 = data4[:75,0:40]

m_class = 'classification_B.txt'

with open(m_class, 'r') as f:
    lines = f.readlines()
    
    c_data = []
    for line in lines:
        c_data.append(int(line.replace('\n','')))
        
pen_class = np.asarray(c_data)
c1 = pen_class[::4]
c2 = pen_class[1::4]
c3 = pen_class[2::4]
c4 = pen_class[3::4]

def pca_and_knn(X,y,limit, num, title):
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)  
    X_train = pca.fit_transform(X_train)    
    X_test = pca.transform(X_test)  

    fig, ax0 = plt.subplots(figsize=(6, 3))
    ax0.plot(pca.explained_variance_ratio_, linewidth=2)
    ax0.set_ylabel('PCA explained variance')
    ax0.set_xlabel('Number of features')
    plt.axvline(x=limit, linestyle='--', color='black')
    plt.title(title)
    plt.show()

    #Create KNN Classifier
    knn = KNeighborsClassifier(n_neighbors=10)

    #Train the model using the training sets
    knn.fit(X_train, y_train)

    #Predict the response for test dataset
    y_pred = knn.predict(X_test)

    print('Accuracy {}'.format(accuracy_score(y_test, y_pred)))  

pca_and_knn(X1,c1,8,1, 'PCA application on type B1')