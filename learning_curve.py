import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from os import listdir
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler 
from sklearn.neighbors import KNeighborsClassifier 
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix  
from sklearn import svm
from sklearn.metrics import accuracy_score
from sklearn.model_selection import learning_curve
from sklearn.decomposition import PCA
from sklearn.model_selection import cross_val_score

#This function referenced from https://mail.python.org/pipermail/tutor/2004-April/029019.html as os.listdir contains error upon running
def mylistdir(directory):
    """A specialized version of os.listdir() that ignores files that
    start with a leading period."""
    filelist = listdir(directory)
    return [x for x in filelist
            if not (x.startswith('.'))]

#Features Data
#/Federtyp B_1.TXT'
path_feature = 'TXTandRaw/TXTandRaw/Features/'
file_feature = mylistdir(path_feature)
file_feature.sort()

#Features Old Data
path_feature_old = 'TestData/TestData/MeasuramentsData/'
file_feature_old = mylistdir(path_feature_old)
file_feature_old.sort()

pen_types = ['B', 'EF', 'M']

#Label Data
path_label = 'TXTandRaw/TXTandRaw/Evaluation/180912_EvaluationHumanMachine.xlsx'
path_label2 = '180905_P.00000051_Auswertung Feder '
num_pos = 4

for i in range(len(pen_types)):
    #Get Label new data
    label_data = pd.read_excel(path_label, sheet_name = pen_types[i])
    temp = label_data['MachineOutput'].values        
    machine_label = np.concatenate((temp[::num_pos], temp[1::num_pos], temp[2::num_pos], temp[3::num_pos])) #Arrange according to position
    
   #Get label old data
    label_name = path_label2 + pen_types[i] + '_Corrected.xlsx'
    label_data2 = pd.read_excel(label_name,sheetname="180905_Feder "+pen_types[i]+" mit Maschine",skipfooter=15)
    label_data2.columns = [np.tile(np.arange(5),6)]
    labels = (2-label_data2[1].values).flatten(order="F").tolist()
    machine_label2 = np.concatenate((labels[::num_pos], labels[1::num_pos], labels[2::num_pos], labels[3::num_pos]))
    
    #Get Feature
    row = machine_label.size
    row_old = machine_label2.size
    col = 16 + 16 + 8 #Number of features
    
    feature = np.zeros((row, col))
    feature_old = np.zeros((row_old,col))
    
    for j in range(num_pos):        
        file_name = path_feature + file_feature[num_pos * i + j]
        file_name_old = path_feature_old + file_feature_old[num_pos * i + j]
        
        data = pd.read_csv(file_name, skiprows=10, decimal=',', delimiter=';', index_col = 'Datum Uhrzeit').values
        data_old = pd.read_csv(file_name_old, skiprows=10, decimal=',', delimiter=';', index_col = 'Datum Uhrzeit').values
        
        feature[row / 4 * j:row / 4 * j + row/4, :col] = data[:row/4, :col]
        feature_old[row_old / 4 * j:row_old / 4 * j + row_old/4, :col] = data_old[:row_old/4, :col]
    
    #Classification
    X = np.concatenate((feature,feature_old))
    Y = np.concatenate((machine_label,machine_label2))
    X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.2)
    
    scaler = StandardScaler()  
    scaler.fit(X_train)

    X_train = scaler.transform(X_train)  
    X_test = scaler.transform(X_test)  
    
    ##KNN
    classifier = KNeighborsClassifier(n_neighbors=5)  #Best K-values after trial from 1 - 40
    classifier.fit(X_train, y_train)      
    
    y_pred = classifier.predict(X_test) 
    
    print "Pen type: ",str(pen_types[i]).upper()
    print 'KNN Classifier'
    print 'Confusion Matrix'
    print(confusion_matrix(y_test, y_pred))  
    print 'Accuracy: ', accuracy_score(y_test, y_pred)
    
    scores = cross_val_score(classifier, X, Y, cv=5)
    print("Accuracy: %0.2f (+/- %0.2f)" % (scores.mean(), scores.std() * 2))
    
    ##Random Forest
    classifier = RandomForestClassifier()
    classifier.fit(X_train, y_train) 
    
    y_pred = classifier.predict(X_test) 
    
    print 'Random Forest Classifier'
    print 'Confusion Matrix'
    print(confusion_matrix(y_test, y_pred))   
    print 'Accuracy: ', accuracy_score(y_test, y_pred)

    scores = cross_val_score(classifier, X, Y, cv=5)
    print("Accuracy: %0.2f (+/- %0.2f)" % (scores.mean(), scores.std() * 2))
    
    ##SVM 
    classifier = svm.SVC(gamma='scale')
    classifier.fit(X_train, y_train) 
    
    y_pred = classifier.predict(X_test) 
    
    print 'SVM Classifier'
    print 'Confusion Matrix'
    print(confusion_matrix(y_test, y_pred))   
    print 'Accuracy: ', accuracy_score(y_test, y_pred)

    scores = cross_val_score(classifier, X, Y, cv=5)
    print("Accuracy: %0.2f (+/- %0.2f)" % (scores.mean(), scores.std() * 2))

    train_sizes, train_scores, valid_scores = learning_curve(KNeighborsClassifier(n_neighbors=5),X, Y, train_sizes=[50, 80, 110])
    plt.plot(train_sizes, train_scores.mean(axis=1), label="Training score")
    plt.plot(train_sizes, valid_scores.mean(axis=1), label="Cross validation score")
    plt.legend(loc="center left")
    plt.xlabel("Training examples")
    plt.ylabel("Score")
    plt.title("Learning Curves KNN with k=5 {} type pen".format(str(pen_types[i]).upper()))
    plt.grid()
    plt.show()
    
    train_sizes, train_scores, valid_scores = learning_curve(RandomForestClassifier(),X, Y, train_sizes=[50, 80, 110])
    plt.plot(train_sizes, train_scores.mean(axis=1), label="Training score")
    plt.plot(train_sizes, valid_scores.mean(axis=1), label="Cross validation score")
    plt.legend(loc="center left")
    plt.xlabel("Training examples")
    plt.ylabel("Score")
    plt.title("Learning Curves Random Forest {} type pen".format(str(pen_types[i]).upper()))
    plt.grid()
    plt.show()
    
    train_sizes, train_scores, valid_scores = learning_curve(svm.SVC(gamma='scale'),X, Y, train_sizes=[50, 80, 110], shuffle=True)
    plt.plot(train_sizes, train_scores.mean(axis=1), label="Training score")
    plt.plot(train_sizes, valid_scores.mean(axis=1), label="Cross validation score")
    plt.legend(loc="center left")
    plt.xlabel("Training examples")
    plt.ylabel("Score")
    plt.title("Learning Curves (SVM, RBF kernel, gamma based on number of features multiplied by variance) {} type pen".format(str(pen_types[i]).upper()))
    plt.grid()
    plt.show()